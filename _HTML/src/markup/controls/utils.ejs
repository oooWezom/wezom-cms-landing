<%
_Module_Helpers.logMsg( ___('ejsConfigFileChangedForUtils') );

class Utils {

	/**
	 * Вывод данных на странцу
	 *
	 * @param      {*}       sample  Образец данных для вывода
	 * @return     {String}  результат печати
	 */
	print( sample, language ) {
		if (FLAGS.utilsPrint) {
			let code = '';
			let print = false;
			switch ( typeof(sample) ) {
				case 'object':
					print = (null !== sample );
					if ( print ) {
						language = language || 'json';
						code = JSON.stringify( sample, null, '\t' );
					}
					break;
				case 'string':
					print = !!sample.length;
					if ( print ) {
						language = language || 'markup';
						code = sample.replace( /</g, '&lt;' );
					}
					break;
			}

			if ( !print ) {
				return '';
			}

			let insertCode = [`<pre class="line-numbers language-${language}"><code>${code}</code></pre>`];

			if (locals.VIEW_ACTIVE && !VIEW_ACTIVE.demoScriptAnsStyles) {
				insertCode.push(`
					<link rel="stylesheet" href="demo-files/prism.css">
					<script src="demo-files/prism.js"></script>
					<script src="demo-files/clipboard.js"></script>
				`)
			}

			return insertCode.join('\n');
		}
		return '';
	}

	/**
	 * Копирование массива объектов в пользовательский массив
	 *  Используется когда нужно размножить список данных
	 *  без созранения ссылок на внутренние объекты
	 *
	 * @param    {Array}     sampleArray - исходный массив
	 * @param    {number}    [copyTimes=1] - количество копий
	 * @param    {Function}  [callback] - для скопированного объекта в списке
	 * @return   {Array}
	 */
	copyListOfObjects( sampleArray, copyTimes=1, callback ) {
		let copiedArray = [];
		for (let n = 0, i = 0; i < copyTimes; i++) {
			for (let j = 0; j < sampleArray.length; j++) {

				let sample = sampleArray[j];
				let copied = Object.assign( {}, sample );
				if ( callback ) {
					callback( copied, n++ );
				}
				copiedArray.push( copied );
			}
		}
		return copiedArray;
	}


	/**
	 * Перевод объекта в строку атрибутов
	 *
	 * @param      {Object}    sample - Образец данных для вывода
	 * @param      {Boolean}   [returnAsArray] - вернуть результат масивом
	 * @return     {String|Array} результат переводов
	 */
	object2attr(sample, returnAsArray) {
		let attrs = [];

		for (var key in sample) {
			let value = sample[key];

			if (/^data-/.test(key)) {

				if ( typeof(value) == 'object' ) {
					value = `'${ JSON.stringify(value) }'`;
				} else {
					value = `"${ value }"`;
				}
				attrs.push(`${key}=${value}`);
				continue;
			}

			if ( Array.isArray(value) ) {
				value = value.join(' ');
			}

			switch (value) {
				case '':
				case true:
					attrs.push(key);
					break;
				case null:
				case false:
				case undefined:
					break;
				default:
					attrs.push(`${key}="${value}"`);
			}
		}

		attrs.sort();
		if (returnAsArray) {
			return attrs;
		}
		return attrs.join(' ');
	}


	/**
	 * Установка пробелов между тысячами
	 *
	 * @param   {String|Number}  numberText - число для формата
	 * @param   {String} 		 [separator] - Разделитель дробей
	 *
	 * @return  {String}
	 */
	setThousands( numberText, separator ) {

		newSeparator = newSeparator || '.';
		separator = separator || '.';
		numberText = ''+numberText;
		numberText =  numberText.split( separator );

		var numberPenny = numberText[1] || '';
		var numberValue = numberText[0];

		var thousandsValue = [];
		var counter = 0;

		for (var i = numberValue.length - 1; i >= 0; i--) {
			var num = numberValue[i];
			thousandsValue.push( num );

			if ( ++counter === 3 && i ) {
				thousandsValue.push( ' ' );
				counter = 0;
			}
		}

		thousandsValue = thousandsValue.reverse().join('');
		if ( numberPenny.length ) {
			return [thousandsValue, numberPenny].join( newSeparator );
		}
		return thousandsValue;
	};


	/**
	 * Замена значений в строке по паттерну из массива.
	 * 	Паттерн в строке один, с определенным количеством повторений
	 * 	Каждый элемент из массива заменить свой паттерн по порядковому номеру
	 * 	К примеру _replaceFromArray( '%s мыла %s', ['Мама', 'раму'] )
	 * 	вернет - 'Мама мыла раму'
	 *
	 * @param   {string}   replacingString   Строка в которой будем менять
	 * @param   {Array}    values            массив значений
	 * @param   {string}   pattern           ['%s'] паттерн для поиска
	 *
	 * @return  {string}   Заменненая строка
	 */
	replaceFromArray( replacingString, values, pattern ) {

		pattern = pattern || '%s';
		if ( !Array.isArray(values) ) {
			values = [values];
		}

		for ( var i = 0; i < values.length; i++ ) {
			var value = values[i];
			replacingString = replacingString.replace( pattern, value );
		}

		return replacingString;
	}
};

locals.Utils = new Utils();
-%>
